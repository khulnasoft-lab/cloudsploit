import { request } from '@octokit/request';
import LRU from 'lru-cache';
import jsonwebtoken from 'jsonwebtoken';

// https://github.com/isaacs/node-lru-cache#readme
function getCache() {
  return new LRU({
    // cache max. 15000 tokens, that will use less than 10mb memory
    max: 15000,
    // Cache for 59 minutes (1 minute less than GitHub expiry)
    maxAge: 1000 * 60 * 59
  });
}

function getSignedJsonWebToken(_ref) {
  let id = _ref.id,
      privateKey = _ref.privateKey;
  const now = Math.floor(Date.now() / 1000);
  const payload = {
    iat: now,
    exp: now + 60 * 10 - 30,
    iss: id
  };
  const token = jsonwebtoken.sign(payload, privateKey, {
    algorithm: "RS256"
  });
  return token;
}

function getInstallationAccessToken(state, _ref) {
  let installationId = _ref.installationId;
  const token = state.cache.get(installationId);

  if (token) {
    return Promise.resolve(token);
  }

  return state.request({
    method: "POST",
    url: "/app/installations/:installation_id/access_tokens",
    installation_id: installationId,
    headers: {
      accept: "application/vnd.github.machine-man-preview+json",
      // TODO: cache the installation token if it's been less than 60 minutes
      authorization: "bearer ".concat(getSignedJsonWebToken(state))
    }
  }).then(response => {
    state.cache.set(installationId, response.data.token);
    return response.data.token;
  });
}

class App {
  constructor(_ref) {
    let id = _ref.id,
        privateKey = _ref.privateKey,
        baseUrl = _ref.baseUrl,
        cache = _ref.cache;
    const state = {
      id,
      privateKey,
      request: baseUrl ? request.defaults({
        baseUrl
      }) : request,
      cache: cache || getCache()
    };
    this.getSignedJsonWebToken = getSignedJsonWebToken.bind(null, state);
    this.getInstallationAccessToken = getInstallationAccessToken.bind(null, state);
  }

}

export { App };
